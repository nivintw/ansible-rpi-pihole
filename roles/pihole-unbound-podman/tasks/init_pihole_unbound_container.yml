---
- name: "[OCI / Podman] Pull of upstream docker.io/pihole/pihole:latest container image"
  become: true
  containers.podman.podman_image:
    name: docker.io/pihole/pihole:latest
    pull: true
    state: present

- name: "[OCI / Podman] Build pihole image with unbound added"
  become: true
  containers.podman.podman_image:
    path: "/tmp/pihole_unbound"
    # NOTE: force the image to be built, even if it already exist.
    # Only useful while developing the ansible project itself.
    pull: false
    state: build
    force: true # temporary
    name: "{{ oci_pihole_image_name }}"

- name: "[OCI / Podman] Setup custom hosts files"
  ansible.builtin.include_tasks: custom_hosts.yml
  when: docker_pihole_dns_custom_hosts | length > 0

- name: "[OCI / Podman] Setup the pi-hole OCI container"
  become: true
  containers.podman.podman_container:
    image: "{{ oci_pihole_image_name }}"
    name: "{{ oci_pihole_container_name }}"
    recreate: true
    # state: quadlet should (ideally) ensure the container is always running under
    # systemd, even after e.g. a power failure / reboot.
    state: quadlet
    # TODO: Note: these volume mounts are related to dnsmasq.
    # As of this comment, /etc/dnsmaq.d/ (the default value that used to work)
    # is no longer created on the host, and thus seemingly this does not work anymore.
    # TODO: look into this more; it might be easily resolved by creating the dir.
    # volumes: "{{ oci_container_pihole_volumes }}"
    env:
      TZ: "{{ oci_pihole_container_timezone }}"
      WEBPASSWORD: "{{ __pihole_service_admin_password }}"
      # Use our unbound recursive DNS server as the upstream.
      # The semicolon at the end ensures that the recursive unbound server
      # is the ONLY upstream. Without it the pihole image sets a backup default upstream DNS server.
      PIHOLE_DNS_: 127.0.0.1#5335;
      # Make re-directing from / to /admin work automatically
      # by setting VIRTUAL_HOST to e.g. pihole.mydomain.tld
      VIRTUAL_HOST: "{{ pihole_domain_name }}"
    # This sets the DNS servers for the container, but not the upstream DNS providers for pihole.
    dns_servers: "{{ docker_pihole_dns_servers }}"
    published_ports:
      - "80:80/tcp"
      - "443:443/tcp"
      - "53:53/udp"
      - "53:53/tcp"
      - "67:67/udp"
    quadlet_options:
      # The below ensures that the container starts at boot.
      # Without this, the quadlet will be generated, but the container will not
      # be started at boot.
      - |
        [Install]
        WantedBy=default.target

- name: "[systemd] Force systemd to reread configs (2.4 and above)"
  become: true
  ansible.builtin.systemd_service:
    # This should hopefully process our newly generated quadlet files
    # and result in the container being created/started without
    # requiring a separate reboot.
    # NOTE: Starting the container on boot should in theory be handled by the
    # existence of the quadlet files.
    daemon_reload: true
    name: "{{ oci_pihole_container_name }}.service"
    state: started
